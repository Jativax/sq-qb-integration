// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Production models for Square to QuickBooks Integration

model SquareOrder {
  id            String   @id @default(cuid())
  squareOrderId String   @unique
  status        String   // "PENDING", "PROCESSING", "COMPLETED", "FAILED"
  payload       Json     // Full Square order object
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // One-to-one relationship with QuickBooksReceipt
  quickBooksReceipt QuickBooksReceipt?

  @@map("square_orders")
}

model QuickBooksReceipt {
  id            String   @id @default(cuid())
  qbReceiptId   String   @unique
  syncStatus    String   // "SYNCED", "FAILED", "PENDING_REVIEW"
  totalAmount   Decimal  @db.Decimal(10, 2)
  rawQBData     Json     // Response from QuickBooks
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Required relationship to SquareOrder (one-to-one)
  squareOrder   SquareOrder @relation(fields: [squareOrderId], references: [id])
  squareOrderId String      @unique

  @@map("quickbooks_receipts")
}

model SyncJob {
  id              String   @id @default(cuid())
  status          String   // "QUEUED", "PROCESSING", "COMPLETED", "FAILED"
  attempts        Int      @default(0)
  lastAttemptedAt DateTime @updatedAt
  logs            Json     // Processing logs or error messages
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("sync_jobs")
}

model AuditLog {
  id        String   @id @default(cuid())
  timestamp DateTime @default(now())
  action    String   // e.g., "ORDER_PROCESSED", "JOB_FAILED", "JOB_RETRIED"
  userId    String?  // nullable, for user-initiated actions
  details   Json     // relevant context like orderId, jobId, error messages
  createdAt DateTime @default(now())

  // Optional relationship to User for user-initiated actions
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("audit_logs")
}

enum UserRole {
  ADMIN
  VIEWER
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String   // hashed with bcrypt
  role      UserRole @default(VIEWER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  sessions  Session[]
  auditLogs AuditLog[]

  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Required relationship to User
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model WebhookDeduplication {
  id        String   @id @default(cuid())
  eventId   String   @unique // Square webhook event_id for deduplication
  eventType String   // Type of webhook event (order.created, etc.)
  processed Boolean  @default(false)
  createdAt DateTime @default(now())
  expiresAt DateTime // TTL for cleanup

  @@index([eventId])
  @@index([expiresAt]) // For efficient cleanup of expired records
  @@map("webhook_deduplication")
}
