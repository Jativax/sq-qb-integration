# ---------- builder ----------
FROM node:18-alpine AS builder
WORKDIR /app
RUN npm install -g pnpm@8.6.12
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
COPY apps/backend/package.json ./apps/backend/
RUN pnpm install --frozen-lockfile --ignore-scripts

# build TS â†’ JS
COPY apps/backend ./apps/backend
RUN pnpm --filter ./apps/backend exec prisma generate --schema prisma/schema.prisma \
 && pnpm --filter ./apps/backend run build \
 && pnpm --filter ./apps/backend run build:seed

# ---------- prod ----------
FROM node:18-alpine AS prod
WORKDIR /app
ENV NODE_ENV=production

# Install dependencies for health checks and networking
RUN apk add --no-cache openssl ca-certificates libstdc++ netcat-openbsd

# copy only the backend artefacts + prod deps
COPY --from=builder /app/apps/backend/dist ./dist
COPY --from=builder /app/apps/backend/prisma ./prisma
COPY --from=builder /app/apps/backend/package.json ./package.json
COPY --from=builder /app/apps/backend/node_modules ./node_modules

# Copy and make entrypoint executable
COPY apps/backend/docker-entrypoint.sh ./
RUN chmod +x docker-entrypoint.sh

# Expose port
EXPOSE 3001

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=5 \
  CMD node -e "require('http').get('http://localhost:3001/health', (r) => process.exit(r.statusCode === 200 ? 0 : 1))" || exit 1

# Use the entrypoint script
ENTRYPOINT ["./docker-entrypoint.sh"]
