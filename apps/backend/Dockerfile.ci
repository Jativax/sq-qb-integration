### --- builder -----------------------------------------------------------
FROM node:18-alpine AS builder
WORKDIR /repo

# Install build dependencies for native modules
RUN apk add --no-cache python3 py3-setuptools make g++

# 1. full install + generate + build
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
COPY apps/backend/package.json ./apps/backend/
COPY apps/frontend/package.json ./apps/frontend/
RUN npm install -g pnpm@8.6.12
RUN pnpm install --frozen-lockfile

# build the backend + generate Prisma client
COPY apps/backend ./apps/backend
RUN pnpm --filter ./apps/backend exec prisma generate \
 && pnpm --filter ./apps/backend run build \
 && pnpm --filter ./apps/backend run build:seed

### --- runtime (prod) -----------------------------------------------------
FROM node:18-alpine AS runtime
WORKDIR /app

# Install dependencies for health checks and networking
RUN apk add --no-cache openssl ca-certificates libstdc++ netcat-openbsd wget python3 py3-setuptools make g++

# app code
COPY --from=builder /repo/apps/backend/dist   ./dist
COPY --from=builder /repo/apps/backend/prisma ./prisma
COPY --from=builder /repo/apps/backend/package.json ./


# copy pnpm store from builder for offline install
COPY --from=builder /root/.local/share/pnpm/store /root/.local/share/pnpm/store

# Ensure @prisma/client exists in runtime
RUN npm install -g pnpm@8.6.12 && \
    (pnpm install --prod --offline || pnpm install --prod --no-frozen-lockfile) && \
    pnpm exec prisma generate

ENV NODE_ENV=production PORT=3001 HOST=0.0.0.0
EXPOSE 3001
HEALTHCHECK CMD wget -q --spider http://localhost:3001/health || exit 1

# Start the application directly
CMD ["node", "dist/index.js"]
