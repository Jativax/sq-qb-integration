services:
  db:
    image: postgres:15
    container_name: sq-qb-postgres-prod
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-squser}
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_DB: ${POSTGRES_DB:-sq_qb_integration}
    volumes:
      - pgdata:/var/lib/postgresql/data
    secrets:
      - postgres_password
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'pg_isready -U ${POSTGRES_USER:-squser} -d ${POSTGRES_DB:-sq_qb_integration}',
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - sq-qb-network

  pgbouncer:
    image: edoburu/pgbouncer:1.18.0
    container_name: sq-qb-pgbouncer-prod
    restart: always
    depends_on:
      - db
    environment:
      DB_USER: ${POSTGRES_USER:-squser}
      DB_PASSWORD_FILE: /run/secrets/postgres_password
    volumes:
      - ./config/pgbouncer/pgbouncer.ini:/etc/pgbouncer/pgbouncer.ini
      - ./config/pgbouncer/userlist.txt:/etc/pgbouncer/userlist.txt
    secrets:
      - postgres_password
    healthcheck:
      test:
        [
          'CMD',
          'pg_isready',
          '-h',
          'localhost',
          '-p',
          '6432',
          '-U',
          '${POSTGRES_USER:-squser}',
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - sq-qb-network

  redis:
    image: redis:7
    container_name: sq-qb-redis-prod
    restart: always
    volumes:
      - redisdata:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - sq-qb-network

  backend:
    image: your-docker-registry/sq-qb-backend:latest
    container_name: sq-qb-backend-prod
    restart: always
    depends_on:
      - db
      - redis
      - pgbouncer
    environment:
      NODE_ENV: production
      HOST: 0.0.0.0
      PORT: 3001
      # DATABASE_URL will be built dynamically from secrets and env vars
      POSTGRES_USER: ${POSTGRES_USER:-squser}
      POSTGRES_DB: ${POSTGRES_DB:-sq_qb_integration}
      PGBOUNCER_HOST: pgbouncer
      PGBOUNCER_PORT: 6432
      # Redis configuration
      REDIS_URL: redis://redis:6379
    secrets:
      - postgres_password
      - password_pepper
      - square_access_token
      - square_application_id
      - square_webhook_signature_key
      - qb_access_token
      - qb_realm_id
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3001/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - sq-qb-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  frontend:
    image: your-docker-registry/sq-qb-frontend:latest
    container_name: sq-qb-frontend-prod
    restart: always
    depends_on:
      - backend
    ports:
      - '80:80'
    healthcheck:
      test:
        [
          'CMD',
          'wget',
          '--no-verbose',
          '--tries=1',
          '--spider',
          'http://localhost:80/health',
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - sq-qb-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.25'
          memory: 64M

volumes:
  pgdata:
    driver: local
  redisdata:
    driver: local

networks:
  sq-qb-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

secrets:
  postgres_password:
    file: ./secrets/postgres_password.txt
  password_pepper:
    file: ./secrets/password_pepper.txt
  square_access_token:
    file: ./secrets/square_access_token.txt
  square_application_id:
    file: ./secrets/square_application_id.txt
  square_webhook_signature_key:
    file: ./secrets/square_webhook_signature_key.txt
  qb_access_token:
    file: ./secrets/qb_access_token.txt
  qb_realm_id:
    file: ./secrets/qb_realm_id.txt
