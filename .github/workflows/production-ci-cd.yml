name: Production CI/CD Pipeline

# Trigger only on pushes to the production branch
on:
  push:
    branches: [production]
  workflow_dispatch: # Allow manual triggering

jobs:
  test-and-build:
    name: Test, Build & Publish Docker Images
    runs-on: ubuntu-latest

    permissions:
      contents: read
      security-events: write

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Setup pnpm and Node.js with caching
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8.6.12

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'pnpm'

      # Step 2.1: Cache pnpm modules
      - name: Cache pnpm modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.pnpm-store
            **/node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      # Step 2.2: Cache Playwright browsers
      - name: Cache Playwright browsers
        uses: actions/cache@v3
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      # Step 3: Install dependencies
      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      # Step 3.4: Format lockfile and code
      - name: Format code and lockfile
        run: |
          pnpm format
          # Ensure lockfile is properly formatted
          if [ -f pnpm-lock.yaml ]; then
            echo "Formatting pnpm-lock.yaml..."
            # Remove any trailing whitespace and ensure consistent formatting
            sed -i 's/[[:space:]]*$//' pnpm-lock.yaml
          fi

      # Step 3.5: Configure system for Redis
      - name: Configure System for Redis
        run: sudo sysctl -w vm.overcommit_memory=1

      # Step 3.6: Install Playwright browser dependencies for Ubuntu 24.04
      # Alternative: Use official Playwright action (uncomment to use):
      # - uses: microsoft/playwright-github-action@v1
      #   with:
      #     browsers: chromium firefox webkit
      #     install-deps: true
      - name: Install Playwright Browser Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libnss3 \
            libatk-bridge2.0-0 \
            libgtk-3-0 \
            libx11-xcb1 \
            libxcomposite1 \
            libxdamage1 \
            libxrandr2 \
            libgbm1 \
            libasound2t64 \
            libpangocairo-1.0-0 \
            libpango-1.0-0 \
            libcups2 \
            libatspi2.0-0 \
            libdrm2 \
            libxfixes3 \
            libxext6 \
            libxi6 \
            libxtst6 \
            ca-certificates \
            fonts-liberation \
            libayatana-appindicator3-1 \
            libwayland-client0 \
            libwayland-cursor0 \
            libwayland-egl1 \
            libnotify4 \
            libgdk-pixbuf-2.0-0 \
            xdg-utils \
            libffi8 \
            libx264-164 \
            libflite1 \
            libgles2 \
            libhyphen0 \
            libmanette-0.2-0

      # Step 3.7: Install Playwright browsers
      - name: Install Playwright browsers
        run: pnpm --filter @sq-qb-integration/e2e-tests install-browsers

      # Step 3.8: Install any additional Playwright dependencies (fallback)
      - name: Install additional Playwright dependencies
        run: |
          # Use Playwright's built-in dependency installer as a fallback
          npx playwright install-deps || echo "Some dependencies may already be installed"

      # Step 3.9: Build Frontend for E2E Tests
      - name: Build Frontend for E2E Tests
        run: |
          npx pnpm --filter frontend build
          echo "‚úÖ Frontend built successfully"
          ls -la apps/frontend/dist/

      # Step 3.10: Verify Frontend Build
      - name: Verify Frontend Build
        run: |
          if [ ! -f "apps/frontend/dist/index.html" ]; then
            echo "‚ùå Frontend build failed - index.html not found"
            exit 1
          fi
          echo "‚úÖ Frontend build verified"

      # Step 4: Run comprehensive CI checks
      - name: Run CI checks
        run: pnpm ci:checks
        env:
          # Provide test environment variables
          NODE_ENV: test
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
          DATABASE_URL: postgresql://testuser:testpass@db:5432/testdb?schema=public
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          SQUARE_ENVIRONMENT: sandbox
          QB_ENVIRONMENT: sandbox
          PORT: 3001
          # Webhook configuration for E2E tests
          SQUARE_WEBHOOK_SIGNATURE_KEY: test-signature-key
          SQUARE_WEBHOOK_URL: http://localhost:3001/api/v1/webhooks/square
          SQUARE_ACCESS_TOKEN: test-token
          SQUARE_APPLICATION_ID: test-app-id
          QB_ACCESS_TOKEN: test-token
          QB_REALM_ID: test-realm
          PASSWORD_PEPPER: test-pepper-at-least-16-chars
          WORKER_CONCURRENCY:
            1

            # Step 4.1: Start Docker Services for E2E Tests
      - name: Start Docker Services for E2E Tests
        env:
          NODE_ENV: test
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
          DATABASE_URL: postgresql://testuser:testpass@db:5432/testdb?schema=public
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          SQUARE_ENVIRONMENT: sandbox
          QB_ENVIRONMENT: sandbox
          PORT: 3001
          SQUARE_WEBHOOK_SIGNATURE_KEY: test-signature-key
          SQUARE_WEBHOOK_URL: http://localhost:3001/api/v1/webhooks/square
          SQUARE_ACCESS_TOKEN: test-token
          SQUARE_APPLICATION_ID: test-app-id
          QB_ACCESS_TOKEN: test-token
          QB_REALM_ID: test-realm
          PASSWORD_PEPPER: test-pepper-at-least-16-chars
          WORKER_CONCURRENCY: 1
        run: |
          echo "üê≥ Starting Docker services for E2E tests..."
          pnpm docker:up:ci:direct

          echo "‚è≥ Waiting for services to be healthy..."
          timeout 120s bash -c 'until docker compose -f docker-compose.yml -f docker-compose.ci.yml exec -T db pg_isready -U testuser -d testdb; do sleep 2; done'
          timeout 30s bash -c 'until docker compose -f docker-compose.yml -f docker-compose.ci.yml exec -T redis redis-cli ping | grep -q PONG; do sleep 2; done'

          echo "‚úÖ Infrastructure services are healthy"

          echo "üöÄ Starting backend and frontend services..."
          docker compose -f docker-compose.yml -f docker-compose.ci.yml up -d backend frontend

          echo "‚è≥ Waiting for backend to be healthy..."
          timeout 60s bash -c 'until curl -f http://localhost:3001/health > /dev/null 2>&1; do sleep 2; done'

          echo "‚è≥ Waiting for frontend to be accessible..."
          timeout 60s bash -c 'until curl -f http://localhost:5173/ > /dev/null 2>&1; do sleep 2; done'

          echo "‚úÖ All services are ready!"

      # Step 4.2: Run E2E Tests with Debugging and Retry
      - name: Run E2E Tests with Debugging and Retry
        if: always()
        env:
          NODE_ENV: test
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
          DATABASE_URL: postgresql://testuser:testpass@db:5432/testdb?schema=public
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          SQUARE_ENVIRONMENT: sandbox
          QB_ENVIRONMENT: sandbox
          PORT: 3001
          SQUARE_WEBHOOK_SIGNATURE_KEY: test-signature-key
          SQUARE_WEBHOOK_URL: http://localhost:3001/api/v1/webhooks/square
          SQUARE_ACCESS_TOKEN: test-token
          SQUARE_APPLICATION_ID: test-app-id
          QB_ACCESS_TOKEN: test-token
          QB_REALM_ID: test-realm
          PASSWORD_PEPPER: test-pepper-at-least-16-chars
          WORKER_CONCURRENCY: 1
        run: |
          set +e  # Don't exit on error

          # Try E2E tests with retry logic
          MAX_ATTEMPTS=2
          for attempt in $(seq 1 $MAX_ATTEMPTS); do
            echo "üîÑ Attempt $attempt/$MAX_ATTEMPTS: Running E2E tests..."
            
            npx pnpm test:e2e
            TEST_EXIT_CODE=$?
            
            if [ $TEST_EXIT_CODE -eq 0 ]; then
              echo "‚úÖ E2E tests passed on attempt $attempt"
              break
            fi
            
            if [ $attempt -lt $MAX_ATTEMPTS ]; then
              echo "‚ùå E2E tests failed on attempt $attempt, retrying..."
              echo "üîÑ Restarting services and waiting..."
              docker compose -f docker-compose.yml -f docker-compose.ci.yml restart backend frontend
              sleep 10
            fi
          done

          if [ $TEST_EXIT_CODE -ne 0 ]; then
            echo "‚ùå E2E tests failed after $MAX_ATTEMPTS attempts"
            echo "üìã Collecting debug information..."
            
            # Show container logs
            docker compose logs --tail=50 backend
            docker compose logs --tail=50 frontend
            
            # Check service health
            docker compose ps
            
            # Test endpoints manually
            curl -f http://localhost:3001/health || echo "Backend health check failed"
            curl -f http://localhost:5173 || echo "Frontend not accessible"
            
            exit $TEST_EXIT_CODE
          fi

          echo "‚úÖ E2E tests passed successfully"

      # Step 5: Set up Docker Buildx for advanced build features
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 6: Login to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Step 7: Build and push backend Docker image
      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: ./apps/backend
          file: ./apps/backend/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/sq-qb-backend:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/sq-qb-backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          sbom: true
          provenance: true

      # Step 8: Build and push frontend Docker image
      - name: Build and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./apps/frontend
          file: ./apps/frontend/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/sq-qb-frontend:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/sq-qb-frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          sbom: true
          provenance: true

      # Step 8.1: Generate SBOM for backend image
      - name: Generate Backend SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ secrets.DOCKERHUB_USERNAME }}/sq-qb-backend:${{ github.sha }}
          format: spdx-json
          output-file: backend-sbom.spdx.json

      # Step 8.2: Scan backend image for vulnerabilities
      - name: Scan Backend Image for Vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/sq-qb-backend:${{ github.sha }}
          format: 'sarif'
          output: 'backend-trivy-results.sarif'
          exit-code: '0'

      # Step 8.3: Upload backend vulnerability scan results
      - name: Upload Backend Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: ${{ hashFiles('backend-trivy-results.sarif') != '' }}
        with:
          sarif_file: 'backend-trivy-results.sarif'
          category: 'backend-image-scan'

      # Step 8.4: Generate SBOM for frontend image
      - name: Generate Frontend SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ secrets.DOCKERHUB_USERNAME }}/sq-qb-frontend:${{ github.sha }}
          format: spdx-json
          output-file: frontend-sbom.spdx.json

      # Step 8.5: Scan frontend image for vulnerabilities
      - name: Scan Frontend Image for Vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/sq-qb-frontend:${{ github.sha }}
          format: 'sarif'
          output: 'frontend-trivy-results.sarif'
          exit-code: '0'

      # Step 8.6: Upload frontend vulnerability scan results
      - name: Upload Frontend Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: ${{ hashFiles('frontend-trivy-results.sarif') != '' }}
        with:
          sarif_file: 'frontend-trivy-results.sarif'
          category: 'frontend-image-scan'

      # Step 8.7: Generate Software Bill of Materials (SBOM)
      - name: Install Syft
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin

      - name: Generate SBOM reports
        run: |
          # Generate SBOM for backend application source
          syft packages ./apps/backend -o spdx-json=backend-sbom.spdx.json

          # Generate SBOM for frontend application source  
          syft packages ./apps/frontend -o spdx-json=frontend-sbom.spdx.json

          echo "‚úÖ SBOM generation completed"
          ls -la *-sbom.spdx.json

      # Step 8.8: Upload SBOMs as artifacts
      - name: Upload SBOM artifacts
        uses: actions/upload-artifact@v4
        if: always() && (hashFiles('backend-sbom.spdx.json') != '' || hashFiles('frontend-sbom.spdx.json') != '')
        with:
          name: sbom-reports-${{ github.sha }}
          path: |
            backend-sbom.spdx.json
            frontend-sbom.spdx.json
          retention-days: 90

      # Step 8.9: Fail on critical vulnerabilities (optional - adjust as needed)
      - name: Check for Critical Vulnerabilities
        run: |
          echo "Checking for critical vulnerabilities..."

          # Check backend scan results
          if grep -q '"severity": "CRITICAL"' backend-trivy-results.sarif; then
            echo "‚ö†Ô∏è Critical vulnerabilities found in backend image"
            echo "Please review the security tab for details"
            # Uncomment the following line to fail the build on critical vulnerabilities
            # exit 1
          fi

          # Check frontend scan results
          if grep -q '"severity": "CRITICAL"' frontend-trivy-results.sarif; then
            echo "‚ö†Ô∏è Critical vulnerabilities found in frontend image"
            echo "Please review the security tab for details"
            # Uncomment the following line to fail the build on critical vulnerabilities
            # exit 1
          fi

          echo "‚úÖ Security scan completed"

      # Step 9: Update docker-compose.prod.yml with specific image tags
      - name: Update production compose file
        run: |
          sed -i "s|your-docker-registry/sq-qb-backend:latest|${{ secrets.DOCKERHUB_USERNAME }}/sq-qb-backend:${{ github.sha }}|g" docker-compose.prod.yml
          sed -i "s|your-docker-registry/sq-qb-frontend:latest|${{ secrets.DOCKERHUB_USERNAME }}/sq-qb-frontend:${{ github.sha }}|g" docker-compose.prod.yml

      # Step 10: Upload updated docker-compose file as artifact
      - name: Upload production compose file
        uses: actions/upload-artifact@v4
        with:
          name: docker-compose-prod-${{ github.sha }}
          path: docker-compose.prod.yml
          retention-days: 30

      # Step 11: Create deployment summary
      - name: Create deployment summary
        run: |
          echo "## üöÄ Production Deployment Ready" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Docker Images Published" >> $GITHUB_STEP_SUMMARY
          echo "- **Backend**: \`${{ secrets.DOCKERHUB_USERNAME }}/sq-qb-backend:${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend**: \`${{ secrets.DOCKERHUB_USERNAME }}/sq-qb-frontend:${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Security Scanning Completed" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ SBOM (Software Bill of Materials) generated for both images" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Vulnerability scanning completed with Trivy" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Results uploaded to GitHub Security tab" >> $GITHUB_STEP_SUMMARY
          echo "- üìã SBOM artifacts available in workflow artifacts" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deployment Commands" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "# Download the updated docker-compose file" >> $GITHUB_STEP_SUMMARY
          echo "curl -O 'https://github.com/${{ github.repository }}/releases/download/artifacts/docker-compose-prod-${{ github.sha }}.yml'" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Deploy to production" >> $GITHUB_STEP_SUMMARY
                      echo "docker compose -f docker-compose-prod-${{ github.sha }}.yml up -d" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Commit Details" >> $GITHUB_STEP_SUMMARY
          echo "- **SHA**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Actor**: @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
