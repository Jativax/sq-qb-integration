name: Production CI/CD Pipeline

# Trigger only on pushes to the production branch
on:
  push:
    branches: [production]
  workflow_dispatch: # Allow manual triggering

jobs:
  test-and-build:
    name: Test, Build & Publish Docker Images
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Setup pnpm and Node.js with caching
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8.6.12

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'pnpm'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # Step 4: Run comprehensive CI checks
      - name: Run CI checks
        run: pnpm ci:checks
        env:
          # Provide test environment variables
          NODE_ENV: test
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          SQUARE_ENVIRONMENT: sandbox
          QB_ENVIRONMENT: sandbox
          PORT: 3001

      # Step 5: Set up Docker Buildx for advanced build features
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 6: Login to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Step 7: Build and push backend Docker image
      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: ./apps/backend
          file: ./apps/backend/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/sq-qb-backend:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/sq-qb-backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      # Step 8: Build and push frontend Docker image
      - name: Build and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./apps/frontend
          file: ./apps/frontend/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/sq-qb-frontend:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/sq-qb-frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      # Step 9: Update docker-compose.prod.yml with specific image tags
      - name: Update production compose file
        run: |
          sed -i "s|your-docker-registry/sq-qb-backend:latest|${{ secrets.DOCKERHUB_USERNAME }}/sq-qb-backend:${{ github.sha }}|g" docker-compose.prod.yml
          sed -i "s|your-docker-registry/sq-qb-frontend:latest|${{ secrets.DOCKERHUB_USERNAME }}/sq-qb-frontend:${{ github.sha }}|g" docker-compose.prod.yml

      # Step 10: Upload updated docker-compose file as artifact
      - name: Upload production compose file
        uses: actions/upload-artifact@v4
        with:
          name: docker-compose-prod-${{ github.sha }}
          path: docker-compose.prod.yml
          retention-days: 30

      # Step 11: Create deployment summary
      - name: Create deployment summary
        run: |
          echo "## ðŸš€ Production Deployment Ready" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Docker Images Published" >> $GITHUB_STEP_SUMMARY
          echo "- **Backend**: \`${{ secrets.DOCKERHUB_USERNAME }}/sq-qb-backend:${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend**: \`${{ secrets.DOCKERHUB_USERNAME }}/sq-qb-frontend:${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deployment Commands" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "# Download the updated docker-compose file" >> $GITHUB_STEP_SUMMARY
          echo "curl -O 'https://github.com/${{ github.repository }}/releases/download/artifacts/docker-compose-prod-${{ github.sha }}.yml'" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Deploy to production" >> $GITHUB_STEP_SUMMARY
                      echo "docker compose -f docker-compose-prod-${{ github.sha }}.yml up -d" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Commit Details" >> $GITHUB_STEP_SUMMARY
          echo "- **SHA**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Actor**: @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
