services:
  # Main application database
  db:
    image: postgres:15-alpine
    container_name: sq-qb-postgres
    restart: unless-stopped
    volumes:
      - pgdata:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-testdb}
      POSTGRES_USER: ${POSTGRES_USER:-testuser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-testpass}
    ports:
      - '5432:5432'
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'pg_isready -U ${POSTGRES_USER:-testuser} -d ${POSTGRES_DB:-testdb}',
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  # In-memory store for BullMQ and caching
  redis:
    image: redis:7-alpine
    container_name: sq-qb-redis
    restart: unless-stopped
    volumes:
      - redisdata:/data
    ports:
      - '6379:6379'
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL connection pooler
  pgbouncer:
    image: edoburu/pgbouncer:1.18.0
    container_name: sq-qb-pgbouncer
    restart: unless-stopped
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=${POSTGRES_USER:-testuser}
      - DB_PASSWORD=${POSTGRES_PASSWORD:-testpass}
      - DB_NAME=${POSTGRES_DB:-testdb}
      - POOL_MODE=transaction
      - MAX_CLIENT_CONN=100
      - DEFAULT_POOL_SIZE=20
    # Note: Port exposure and LISTEN_ADDR configured in docker-compose.ci.yml for CI testing
    depends_on:
      db:
        condition: service_healthy

  # New service for running one-off commands like migrations and seeding
  backend_service_runner:
    build:
      context: .
      dockerfile: ./apps/backend/Dockerfile.ci
    container_name: sq-qb-backend-runner
    # This service is not meant to run continuously; it's a template for `docker compose run`.
    command: sleep infinity
    volumes:
      - .:/app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-testuser}:${POSTGRES_PASSWORD:-testpass}@db:5432/${POSTGRES_DB:-testdb}?schema=public
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - NODE_ENV=development
      - NODE_ENV=test

volumes:
  pgdata:
  redisdata:
